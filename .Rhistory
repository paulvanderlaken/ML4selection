mutate(company = ifelse(substring(ID_NEW,1,1) == "U","Consumer Goods","Oil & Gas")) %>%
group_by(ID_NEW) %>%
filter(mobilitystatus == "STIA") %>%
mutate(start = min(record.start)) %>%
select(ID_NEW, start, record.end, attrition, company) %>%
filter(record.end == max(record.end)) %>%
mutate(record.end.num = as.numeric(record.end - start)) %>%
SurvivalPlot.company(., "voluntary")
bind_rows(c1, c2) %>%
mutate(company = ifelse(substring(ID_NEW,1,1) == "U","Consumer Goods","Oil & Gas")) %>%
group_by(ID_NEW) %>%
filter(mobilitystatus == "Repatriate") %>%
mutate(start = min(record.start)) %>%
select(ID_NEW, start, record.end, attrition, company) %>%
filter(record.end == max(record.end)) %>%
mutate(record.end.num = as.numeric(record.end - start)) %>%
SurvivalPlot.company(., "voluntary")
getwd()
list.files()
setwd()
gsub("data", "figures", getwd()
)
ggsave("survival_STIA.png", path = gsub("data", "figures", getwd()))
### SURIVAL PLOTS FOR STIA AND REPATRIATE SPECIFICALLY:
bind_rows(c1, c2) %>%
mutate(company = ifelse(substring(ID_NEW,1,1) == "U","Consumer Goods","Oil & Gas")) %>%
group_by(ID_NEW) %>%
filter(mobilitystatus == "STIA") %>%
mutate(start = min(record.start)) %>%
select(ID_NEW, start, record.end, attrition, company) %>%
filter(record.end == max(record.end)) %>%
mutate(record.end.num = as.numeric(record.end - start)) %>%
SurvivalPlot.company(., "voluntary")
ggsave("survival_STIA.png", path = gsub("data", "figures", getwd()))
bind_rows(c1, c2) %>%
mutate(company = ifelse(substring(ID_NEW,1,1) == "U","Consumer Goods","Oil & Gas")) %>%
group_by(ID_NEW) %>%
filter(mobilitystatus == "Repatriate") %>%
mutate(start = min(record.start)) %>%
select(ID_NEW, start, record.end, attrition, company) %>%
filter(record.end == max(record.end)) %>%
mutate(record.end.num = as.numeric(record.end - start)) %>%
SurvivalPlot.company(., "voluntary")
ggsave("survival_repat.png", path = gsub("data", "figures", getwd()))
# AUTOMATED SELECTION SIMULATION
library(MASS)
library(ggplot2)
library(dplyr)
# set wd
setwd("C:/Users/u1235656/stack/PhD/Dissertatie/selection_evolution")
# set options
options(scipen = 999)
theme_set(theme_light())
# set overall seed
set.seed(1)
# determine population size
pop_n = 100000
org_n = 1000
applicant_n = 1000
attrition_rate = 0.10
# determine means
true_means = c(0, 0)
true_cov = matrix(c(1, 0.4,
0.4, 1), nrow = 2)
# simulate population data
pop = mvrnorm(n = pop_n, mu = true_means, Sigma = true_cov, empirical = TRUE)
# retrieve random organizational population
org_rows <- sample(1:nrow(pop), org_n)
org <- pop[org_rows,]
pop <- pop[-org_rows,]
# determine number of years
years = 20
for(year in seq(years)){
print(year)
# simulate new population
pop = mvrnorm(n = pop_n, mu = true_means, Sigma = true_cov, empirical = TRUE)
# retrieve regression coefficients
lm_res1 <- lm(org[,1] ~ org[,2])
# visualize relationship
p <- ggplot(data.frame(org), aes(x = X2, y = X1)) +
geom_point() +
geom_smooth(method = "lm") +
geom_text(aes(x = -3, y = 3, label = round(lm_res1$coefficients[2], 3)), col = 'red') +
coord_cartesian(xlim = c(-5, 5), ylim = c(-5, 5))
# save plot
ggsave(filename = paste0("images/scatterplot_org_pop_", year, ".png"),
plot = p)
# simulate 10% leavers
org_leavers_rows <- sample(1:nrow(org), org_n*attrition_rate)
org <- org[-org_leavers_rows,]
# retrieve applicants
applicant_rows <- sample(1:nrow(pop), applicant_n)
# assess applicant estimated future performance
predicted_performance <- pop[applicant_rows, 2] * lm_res1$coefficients[2]
# determine top estimated performers
top_applicants <- order(predicted_performance, decreasing = T)[1:(org_n*attrition_rate)]
# select top estimated performers
org <- rbind(org, pop[applicant_rows[top_applicants], ])
pop <- pop[-applicant_rows[top_applicants], ]
}
# AUTOMATED SELECTION SIMULATION
library(MASS)
library(ggplot2)
library(dplyr)
# set wd
setwd("C:/Users/u1235656/stack/PhD/Dissertatie/selection_evolution")
# set options
options(scipen = 999)
theme_set(theme_light())
# set overall seed
set.seed(1)
# determine population size
pop_n = 100000
org_n = 1000
applicant_n = 1000
attrition_rate = 0.10
# determine means
true_means = c(0, 0)
true_cov = matrix(c(1, 0.4,
0.4, 1), nrow = 2)
# simulate population data
pop = mvrnorm(n = pop_n, mu = true_means, Sigma = true_cov, empirical = TRUE)
# retrieve random organizational population
org_rows <- sample(1:nrow(pop), org_n)
org <- pop[org_rows,]
pop <- pop[-org_rows,]
# determine number of years
years = 20
for(year in seq(years)){
print(year)
# simulate new population
pop = mvrnorm(n = pop_n, mu = true_means, Sigma = true_cov, empirical = TRUE)
# retrieve regression coefficients
lm_res1 <- lm(org[,1] ~ org[,2])
# visualize relationship
p <- ggplot(data.frame(org), aes(x = X2, y = X1)) +
geom_point() +
geom_smooth(method = "lm") +
coord_cartesian(xlim = c(-5, 5), ylim = c(-5, 5)) +
labs(title = paste0("Organization after ", i," iterations"),
subtitle = pate0("Correlation = "), round(lm_res1$coefficients[2], 3))
# save plot
ggsave(filename = paste0("images/scatterplot_org_pop_", year, ".png"),
plot = p)
# simulate 10% leavers
org_leavers_rows <- sample(1:nrow(org), org_n*attrition_rate)
org <- org[-org_leavers_rows,]
# retrieve applicants
applicant_rows <- sample(1:nrow(pop), applicant_n)
# assess applicant estimated future performance
predicted_performance <- pop[applicant_rows, 2] * lm_res1$coefficients[2]
# determine top estimated performers
top_applicants <- order(predicted_performance, decreasing = T)[1:(org_n*attrition_rate)]
# select top estimated performers
org <- rbind(org, pop[applicant_rows[top_applicants], ])
pop <- pop[-applicant_rows[top_applicants], ]
}
# AUTOMATED SELECTION SIMULATION
library(MASS)
library(ggplot2)
library(dplyr)
# set wd
setwd("C:/Users/u1235656/stack/PhD/Dissertatie/selection_evolution")
# set options
options(scipen = 999)
theme_set(theme_light())
# set overall seed
set.seed(1)
# determine population size
pop_n = 100000
org_n = 1000
applicant_n = 1000
attrition_rate = 0.10
# determine means
true_means = c(0, 0)
true_cov = matrix(c(1, 0.4,
0.4, 1), nrow = 2)
# simulate population data
pop = mvrnorm(n = pop_n, mu = true_means, Sigma = true_cov, empirical = TRUE)
# retrieve random organizational population
org_rows <- sample(1:nrow(pop), org_n)
org <- pop[org_rows,]
pop <- pop[-org_rows,]
# determine number of years
years = 20
for(year in seq(years)){
print(year)
# simulate new population
pop = mvrnorm(n = pop_n, mu = true_means, Sigma = true_cov, empirical = TRUE)
# retrieve regression coefficients
lm_res1 <- lm(org[,1] ~ org[,2])
# visualize relationship
p <- ggplot(data.frame(org), aes(x = X2, y = X1)) +
geom_point() +
geom_smooth(method = "lm") +
coord_cartesian(xlim = c(-5, 5), ylim = c(-5, 5)) +
labs(title = paste0("Organization after ", i," iterations"),
subtitle = paste0("Correlation = "), round(lm_res1$coefficients[2], 3))
# save plot
ggsave(filename = paste0("images/scatterplot_org_pop_", year, ".png"),
plot = p)
# simulate 10% leavers
org_leavers_rows <- sample(1:nrow(org), org_n*attrition_rate)
org <- org[-org_leavers_rows,]
# retrieve applicants
applicant_rows <- sample(1:nrow(pop), applicant_n)
# assess applicant estimated future performance
predicted_performance <- pop[applicant_rows, 2] * lm_res1$coefficients[2]
# determine top estimated performers
top_applicants <- order(predicted_performance, decreasing = T)[1:(org_n*attrition_rate)]
# select top estimated performers
org <- rbind(org, pop[applicant_rows[top_applicants], ])
pop <- pop[-applicant_rows[top_applicants], ]
}
# AUTOMATED SELECTION SIMULATION
library(MASS)
library(ggplot2)
library(dplyr)
# set wd
setwd("C:/Users/u1235656/stack/PhD/Dissertatie/selection_evolution")
# set options
options(scipen = 999)
theme_set(theme_light())
# set overall seed
set.seed(1)
# determine population size
pop_n = 100000
org_n = 1000
applicant_n = 1000
attrition_rate = 0.10
# determine means
true_means = c(0, 0)
true_cov = matrix(c(1, 0.4,
0.4, 1), nrow = 2)
# simulate population data
pop = mvrnorm(n = pop_n, mu = true_means, Sigma = true_cov, empirical = TRUE)
# retrieve random organizational population
org_rows <- sample(1:nrow(pop), org_n)
org <- pop[org_rows,]
pop <- pop[-org_rows,]
# determine number of years
years = 20
for(year in seq(years)){
print(year)
# simulate new population
pop = mvrnorm(n = pop_n, mu = true_means, Sigma = true_cov, empirical = TRUE)
# retrieve regression coefficients
lm_res1 <- lm(org[,1] ~ org[,2])
# visualize relationship
p <- ggplot(data.frame(org), aes(x = X2, y = X1)) +
geom_point() +
geom_smooth(method = "lm") +
coord_cartesian(xlim = c(-5, 5), ylim = c(-5, 5)) +
labs(title = paste0("Organization after ", year," iterations"),
subtitle = paste0("Correlation = "), round(lm_res1$coefficients[2], 3))
# save plot
ggsave(filename = paste0("images/scatterplot_org_pop_", year, ".png"),
plot = p)
# simulate 10% leavers
org_leavers_rows <- sample(1:nrow(org), org_n*attrition_rate)
org <- org[-org_leavers_rows,]
# retrieve applicants
applicant_rows <- sample(1:nrow(pop), applicant_n)
# assess applicant estimated future performance
predicted_performance <- pop[applicant_rows, 2] * lm_res1$coefficients[2]
# determine top estimated performers
top_applicants <- order(predicted_performance, decreasing = T)[1:(org_n*attrition_rate)]
# select top estimated performers
org <- rbind(org, pop[applicant_rows[top_applicants], ])
pop <- pop[-applicant_rows[top_applicants], ]
}
# AUTOMATED SELECTION SIMULATION
library(MASS)
library(ggplot2)
library(dplyr)
# set wd
setwd("C:/Users/u1235656/stack/PhD/Dissertatie/selection_evolution")
# set options
options(scipen = 999)
theme_set(theme_light())
# set overall seed
set.seed(1)
# determine population size
pop_n = 100000
org_n = 1000
applicant_n = 1000
attrition_rate = 0.10
# determine means
true_means = c(0, 0)
true_cov = matrix(c(1, 0.4,
0.4, 1), nrow = 2)
# simulate population data
pop = mvrnorm(n = pop_n, mu = true_means, Sigma = true_cov, empirical = TRUE)
# retrieve random organizational population
org_rows <- sample(1:nrow(pop), org_n)
org <- pop[org_rows,]
pop <- pop[-org_rows,]
# determine number of years
years = 40
for(year in seq(years)){
print(year)
# simulate new population
pop = mvrnorm(n = pop_n, mu = true_means, Sigma = true_cov, empirical = TRUE)
# retrieve regression coefficients
lm_res1 <- lm(org[,1] ~ org[,2])
# visualize relationship
p <- ggplot(data.frame(org), aes(x = X2, y = X1)) +
geom_point() +
geom_smooth(method = "lm") +
coord_cartesian(xlim = c(-5, 5), ylim = c(-5, 5)) +
labs(title = paste0("Organization after ", year," iterations"),
subtitle = paste0("Correlation = "), round(lm_res1$coefficients[2], 3))
# save plot
ggsave(filename = paste0("images/scatterplot_org_pop_", year, ".png"),
plot = p)
# simulate 10% leavers
org_leavers_rows <- sample(1:nrow(org), org_n*attrition_rate)
org <- org[-org_leavers_rows,]
# retrieve applicants
applicant_rows <- sample(1:nrow(pop), applicant_n)
# assess applicant estimated future performance
predicted_performance <- pop[applicant_rows, 2] * lm_res1$coefficients[2]
# determine top estimated performers
top_applicants <- order(predicted_performance, decreasing = T)[1:(org_n*attrition_rate)]
# select top estimated performers
org <- rbind(org, pop[applicant_rows[top_applicants], ])
pop <- pop[-applicant_rows[top_applicants], ]
}
install.packages('gganimate')
library(devtools)
install_github("dgrtwo/gganimate")
# AUTOMATED SELECTION SIMULATION
library(MASS)
library(ggplot2)
library(dplyr)
library(devtools)
install_github("dgrtwo/gganimate")
library(gganimate)
# set wd
setwd("C:/Users/u1235656/stack/PhD/Dissertatie/selection_evolution")
# set options
options(scipen = 999)
theme_set(theme_light())
# set overall seed
set.seed(1)
# determine population size
pop_n = 100000
org_n = 1000
applicant_n = 1000
attrition_rate = 0.10
# determine means
true_means = c(0, 0)
true_cov = matrix(c(1, 0.4,
0.4, 1), nrow = 2)
# simulate population data
pop = mvrnorm(n = pop_n, mu = true_means, Sigma = true_cov, empirical = TRUE)
# retrieve random organizational population
org_rows <- sample(1:nrow(pop), org_n)
org <- pop[org_rows,]
pop <- pop[-org_rows,]
# determine number of years
years = 40
for(year in seq(years)){
print(year)
# simulate new population
pop = mvrnorm(n = pop_n, mu = true_means, Sigma = true_cov, empirical = TRUE)
# retrieve regression coefficients
lm_res1 <- lm(org[,1] ~ org[,2])
# visualize relationship
p <- ggplot(data.frame(org), aes(x = X2, y = X1)) +
geom_point() +
geom_smooth(method = "lm") +
coord_cartesian(xlim = c(-5, 5), ylim = c(-5, 5)) +
labs(title = paste0("Organization after ", year," iterations"),
subtitle = paste0("Correlation = ", round(lm_res1$coefficients[2], 3)))
# save plot
ggsave(filename = paste0("images/scatterplot_org_pop_", year, ".png"),
plot = p)
# simulate 10% leavers
org_leavers_rows <- sample(1:nrow(org), org_n*attrition_rate)
org <- org[-org_leavers_rows,]
# retrieve applicants
applicant_rows <- sample(1:nrow(pop), applicant_n)
# assess applicant estimated future performance
predicted_performance <- pop[applicant_rows, 2] * lm_res1$coefficients[2]
# determine top estimated performers
top_applicants <- order(predicted_performance, decreasing = T)[1:(org_n*attrition_rate)]
# select top estimated performers
org <- rbind(org, pop[applicant_rows[top_applicants], ])
pop <- pop[-applicant_rows[top_applicants], ]
}
library(ggplot2)
# AUTOMATED SELECTION SIMULATION
library(MASS)
library(ggplot2)
library(dplyr)
# library(devtools)
# install_github("dgrtwo/gganimate")
library(gganimate)
# set wd
setwd("C:/Users/u1235656/stack/PhD/Dissertatie/selection_evolution")
# set options
options(scipen = 999)
theme_set(theme_light())
# set overall seed
set.seed(1)
# determine population size
pop_n = 100000
org_n = 1000
applicant_n = 1000
attrition_rate = 0.10
# determine means
true_means = c(0, 0)
true_cov = matrix(c(1, 0.4,
0.4, 1), nrow = 2)
# simulate population data
pop = mvrnorm(n = pop_n, mu = true_means, Sigma = true_cov, empirical = TRUE)
# retrieve random organizational population
org_rows <- sample(1:nrow(pop), org_n)
org <- pop[org_rows,]
pop <- pop[-org_rows,]
# determine number of years
years = 40
for(year in seq(years)){
print(year)
# simulate new population
pop = mvrnorm(n = pop_n, mu = true_means, Sigma = true_cov, empirical = TRUE)
# retrieve regression coefficients
lm_res1 <- lm(org[,1] ~ org[,2])
# visualize relationship
p <- ggplot(data.frame(org), aes(x = X2, y = X1)) +
geom_point() +
geom_smooth(method = "lm") +
coord_cartesian(xlim = c(-5, 5), ylim = c(-5, 5)) +
labs(title = paste0("Organization after ", year," iterations"),
subtitle = paste0("Correlation = ", round(lm_res1$coefficients[2], 3)))
# save plot
ggsave(filename = paste0("images/scatterplot_org_pop_", year, ".png"),
plot = p)
# simulate 10% leavers
org_leavers_rows <- sample(1:nrow(org), org_n*attrition_rate)
org <- org[-org_leavers_rows,]
# retrieve applicants
applicant_rows <- sample(1:nrow(pop), applicant_n)
# assess applicant estimated future performance
predicted_performance <- pop[applicant_rows, 2] * lm_res1$coefficients[2]
# determine top estimated performers
top_applicants <- order(predicted_performance, decreasing = T)[1:(org_n*attrition_rate)]
# select top estimated performers
org <- rbind(org, pop[applicant_rows[top_applicants], ])
pop <- pop[-applicant_rows[top_applicants], ]
}
# AUTOMATED SELECTION SIMULATION
library(MASS)
library(ggplot2)
library(dplyr)
# library(devtools)
# install_github("dgrtwo/gganimate")
library(gganimate)
# set wd
setwd("C:/Users/u1235656/stack/PhD/Dissertatie/selection_evolution")
# set options
options(scipen = 999)
theme_set(theme_light())
# set overall seed
set.seed(1)
# determine population size
pop_n = 100000
org_n = 1000
applicant_n = 1000
attrition_rate = 0.10
# determine means
true_means = c(0, 0)
true_cov = matrix(c(1, 0.4,
0.4, 1), nrow = 2)
# simulate population data
pop = mvrnorm(n = pop_n, mu = true_means, Sigma = true_cov, empirical = TRUE)
# retrieve random organizational population
org_rows <- sample(1:nrow(pop), org_n)
org <- pop[org_rows,]
pop <- pop[-org_rows,]
# determine number of years
years = 40
for(year in seq(years)){
print(year)
# simulate new population
pop = mvrnorm(n = pop_n, mu = true_means, Sigma = true_cov, empirical = TRUE)
# retrieve regression coefficients
lm_res1 <- lm(org[,1] ~ org[,2])
# visualize relationship
p <- ggplot(data.frame(org), aes(x = X2, y = X1)) +
geom_point() +
geom_smooth(method = "lm") +
coord_cartesian(xlim = c(-5, 5), ylim = c(-5, 5)) +
labs(title = paste0("Organization after ", year," iterations"),
subtitle = paste0("Correlation = ", round(lm_res1$coefficients[2], 3)))
# save plot
ggsave(filename = paste0("images/scatterplot_org_pop_", year, ".png"),
plot = p)
# simulate 10% leavers
org_leavers_rows <- sample(1:nrow(org), org_n*attrition_rate)
org <- org[-org_leavers_rows,]
# retrieve applicants
applicant_rows <- sample(1:nrow(pop), applicant_n)
# assess applicant estimated future performance
predicted_performance <- pop[applicant_rows, 2] * lm_res1$coefficients[2]
# determine top estimated performers
top_applicants <- order(predicted_performance, decreasing = T)[1:(org_n*attrition_rate)]
# select top estimated performers
org <- rbind(org, pop[applicant_rows[top_applicants], ])
pop <- pop[-applicant_rows[top_applicants], ]
}
